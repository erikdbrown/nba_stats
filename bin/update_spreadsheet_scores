#!/usr/bin/env node

require('dotenv').config();
const _ = require('lodash');
const cheerio = require('cheerio');
const models = require('../models')
const request = require('request-promise-native');
const {SheetsAPI, Sheets} = require('../sheets');
const {GmailAPI} = require('../gmail');

function update_spreadsheet_scores() {
    let old_leaders = null;
    let old_totals = null;
    let spreadsheet = null;
    let old_standings = null;
    let new_leaders = null;
    let new_totals = null
    return SheetsAPI.get_sheet_details(process.env.SPREADSHEET_ID)
      .then(response => {
        spreadsheet = new Sheets(response.data)
        return Promise.all([spreadsheet.get_range('LeaderBoard'), spreadsheet.get_range('TotalWins')])
      })
      .then(_.spread((old_leader_rows, old_total_wins) => {
        old_leaders = old_leader_rows
        old_totals = _.map(old_total_wins, win_total => [Number(win_total)])
        old_standaings = spreadsheet.get_range('Standings')
        return models.NBATeam.objects.get_team_scores();
      }))
      .then(nba_teams => {
        const sorted_teams = sort_nba_teams_by_wins(nba_teams)
        new_leaders = _.map(sorted_teams, row => [_.first(row)])
        new_totals = _.map(sorted_teams, row => [_.last(row)])
        return spreadsheet.update('Standings', sorted_teams)
      })
      .then(() => {
        return update_timestamp(spreadsheet)
      })
      .then(() => {
        return sendLeadChangeEmail(getLeadChange(old_leaders, old_totals, new_leaders, new_totals));
      })
      .then(email_administrator)
      .then(() => {
        process.exit();
      })
      .catch(err => {
        console.log(err)
        email_error(err);
        process.exit();
      })
}

function getLeaders(leader_names, totals) {
  var win_total = totals[0][0];
  if (win_total === 0) {
    return [];
  }

  return totals.reduce(function (leaders, total, index) {
    if (total[0] === win_total) {
      leaders.push(leader_names[index][0]);
    }
    return leaders;
  }, []);
}

function getLeaderDifference(old_array, new_array) {
  return new_array.reduce(function (leaders, leader) {
    if (old_array.indexOf(leader) < 0) {
      leaders.push(leader);
    }
    return leaders;
  }, []);
}

function getLeadChange(old_leaders, old_totals, new_leaders, new_totals) {
  var old_win_total = old_totals[0][0];
  var old_win_leaders = getLeaders(old_leaders, old_totals);
  var new_win_leaders = getLeaders(new_leaders, new_totals);
  var new_win_total = new_totals[0][0];

  var fallen_leaders = getLeaderDifference(new_win_leaders, old_win_leaders);
  var added_leaders = getLeaderDifference(old_win_leaders, new_win_leaders);

  if (added_leaders.length || fallen_leaders.length) {
    var incumbent_leaders = new_win_leaders.reduce(function(incumbents, leader) {
      if (old_win_leaders.indexOf(leader) !== -1) {
        incumbents.push(leader);
      }
      return incumbents;
    }, []);

    console.log({added: added_leaders, incumbents: incumbent_leaders, fallen: fallen_leaders, wins: new_win_total})
    return {added: added_leaders, incumbents: incumbent_leaders, fallen: fallen_leaders, wins: new_win_total};
  }

  return null;
}

function getNameString(collection) {
  if (collection.length === 1) {
    return collection[0];
  } else if (collection.length === 2) {
    return collection.join(' and ');
  } else {
    var last_index = collection.length - 1;
    return collection.slice(0, last_index).join(', ') + ', and ' + collection[last_index];
  }
}

function getHasOrHave(collection) {
  return collection.length > 1 ? ' have ' : ' has ';
}

function getInsult(lead_change) {
    const leaders = lead_change.incumbents.concat(lead_change.added);
    let verb = 'is'
    if (leaders.length > 1) {
        verb = 'are'
    }
    const template = `as <adjective> as <article target=adj1> <adjective min=1 max=3 id=adj1> <amount> of <adjective min=1 max=3> <animal> <animal_part>`

    const url = `https://insult.mattbas.org/api/en/insult.json?template=${template}`

    return request(url).then(response => {
      const insult = `
        <p>And now a random insult:</p>
        <p>${getNameString(leaders)} ${verb} ${JSON.parse(response).insult}</p>
      `;
      return insult;
    })
}

function sendLeadChangeEmail(lead_change) {
    if (!lead_change) {
        return
    }
    var subject = 'NBA Wins Pool: There\'s been a LEAD CHANGE!!';
    var body = getEmailParagraphs(lead_change);
    var link_to_spreadsheet = `<p><a href="https://docs.google.com/spreadsheets/d/${process.env.SPREADSHEET_ID}">Here are the standings</a></p>`;
    var greeting = '<p>Good morning,</p>'
    var signoff = '<p>All the best,</p><p>Erik</p>'
    var ps = '<p>PS: This email is auto-generated. If you don\'t want to receive it, just email me back.'

    return Promise.all([
        getInsult(lead_change),
        models.Player.objects.get_all(['email'])
    ]).then(_.spread((insult_html, player_rows) => {
        const email_html = greeting + body + link_to_spreadsheet + signoff + ps;
        const email_addresses = _.map(player_rows, 'email')
        console.log(email_addresses)
        return GmailAPI.sendEmail(email_addresses, subject, email_html);
    }))
}

function getEmailParagraphs(lead_change) {
  var fallen_paragraph = '';
  var new_leaders_paragraph = '';
  var incumbent_leader_paragraph = '';

  if (lead_change.fallen.length) {
    if (lead_change.incumbents.length) {
      fallen_paragraph = '<p>' + getNameString(lead_change.fallen) + getHasOrHave(lead_change.fallen) +
        'fallen from the leaders\' circle.</p>'
    }

    fallen_paragraph += '<p>Better luck next time, ' + getNameString(lead_change.fallen) + '!</p>';
  }

  if (lead_change.added.length) {
    if (!lead_change.incumbents.length && !lead_change.fallen.length) {
      new_leaders_paragraph = '<p>After the first day of games, your leaders are ' + getNameString(lead_change.added) + '.</p><p>Good luck everyone!'
    } else {
      new_leaders_paragraph = '<p>There ' + (lead_change.added.length > 1 ? 'are': 'is a') + ' new leader' + (lead_change.added.length > 1 ? 's': '') + '!</p>'
    }
  }

  if (lead_change.incumbents.length) {
    if (!lead_change.added.length) {
      new_leaders_paragraph = '<p>There are no new leaders, but there\'s a change at the top.</p>'
      incumbent_leader_paragraph = '<p>' + getNameString(lead_change.incumbents) + getHasOrHave(lead_change.incumbents) + 'thinned out the leaders\' ' +
        'circle and hold' + (lead_change.incumbents.length > 1 ? '' : 's') + ' on to the lead with ' + lead_change.wins + ' wins.</p>'
    } else {
      incumbent_leader_paragraph = '<p>' + getNameString(lead_change.added) + ' join' + (lead_change.added.length > 1 ? ' ': 's ') +
        getNameString(lead_change.incumbents) + ' in the top spot with ' + lead_change.wins + ' wins each.</p>'
    }
  } else if (lead_change.fallen.length) {
    incumbent_leader_paragraph = '<p>' + getNameString(lead_change.added) + getHasOrHave(lead_change.added) + 'taken down ' + getNameString(lead_change.fallen) + ' to claim the top spot with ' + lead_change.wins + ' wins.</p>'
  }

  return new_leaders_paragraph + incumbent_leader_paragraph + fallen_paragraph;
}

function email_administrator() {
    var now = new Date();
    return GmailAPI.sendEmail(
        [process.env.ADMIN_EMAIL],
        'Scores Updated',
        `The time is: ${now.toString()}`
    );
}

function email_error(error) {
    var now = new Date();
    return GmailAPI.sendEmail(
        [process.env.ADMIN_EMAIL],
        'There was an error updating scores',
        error
    );
}

function sort_nba_teams_by_wins(nba_teams) {
    const by_pool_team = _.groupBy(nba_teams, row => row.pool_name);
    const sheet_rows = _.reduce(by_pool_team, (accumulator, teams, pool_name) => {
        const pool_row = [pool_name];
        let total_wins = 0;
        for (let i = 0; i < teams.length; i++) {
            let team = teams[i];
            let index = team.draft_round + (team.draft_round - 1);
            pool_row[index] = team.team_name;
            pool_row[index + 1] = team.wins;
            total_wins += team.wins;
        }
        pool_row.push(total_wins);
        accumulator.push(pool_row);
        return accumulator;
    }, [])
    return sheet_rows.sort((rowA, rowB) => { return _.last(rowB) - _.last(rowA)})
}

function update_timestamp(spreadsheet) {
    const date = new Date()
    let hours = date.getHours();
    let am_pm = 'PM';
    if (hours > 12) {
        hours = hours - 12;
    } else if (hours < 12) {
        am_pm = 'AM'
    } else {
        hours = 12
    }
    const time_string = `${date.toDateString()} at ${hours}:${date.getMinutes()} ${am_pm}`
    return spreadsheet.update('UpdatedAt', [[time_string]])
}

update_spreadsheet_scores()